from heapq import heappop, heappush

def manhattan_distance(state):
    goal = {1: (0, 0), 2: (0, 1), 3: (0, 2),
            4: (1, 0), 5: (1, 1), 6: (1, 2),
            7: (2, 0), 8: (2, 1), 0: (2, 2)}
    distance = 0
    for i in range(3):
        for j in range(3):
            if state[i][j] != 0:
                goal_i, goal_j = goal[state[i][j]]
                distance += abs(i - goal_i) + abs(j - goal_j)
    return distance

def get_neighbors(state):
    neighbors = []
    zero_i, zero_j = next((i, j) for i in range(3) for j in range(3) if state[i][j] == 0)
    moves = [(0, 1), (0, -1), (1, 0), (-1, 0)]
    for move in moves:
        new_i, new_j = zero_i + move[0], zero_j + move[1]
        if 0 <= new_i < 3 and 0 <= new_j < 3:
            new_state = [row[:] for row in state]
            new_state[zero_i][zero_j], new_state[new_i][new_j] = new_state[new_i][new_j], new_state[zero_i][zero_j]
            neighbors.append(new_state)
    return neighbors

def a_star_search(initial_state):
    heap = [(manhattan_distance(initial_state), 0, initial_state)]
    visited = set()
    while heap:
        _, cost, state = heappop(heap)
        if state == goal_state:
            return state
        if tuple(map(tuple, state)) in visited:
            continue
        visited.add(tuple(map(tuple, state)))
        for neighbor in get_neighbors(state):
            heappush(heap, (cost + 1 + manhattan_distance(neighbor), cost + 1, neighbor))
    return None

def print_solution(solution):
    if solution is None:
        print("No solution exists.")
    else:
        for row in solution:
            print(row)

if __name__ == "__main__":
    initial_state = [
        [1, 2, 3],
        [4, 5, 6],
        [7, 8, 0]
    ]
    goal_state = [
        [1, 2, 3],
        [4, 5, 6],
        [7, 8, 0]
    ]
    solution = a_star_search(initial_state)
    print_solution(solution)
